<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.7</string>
	<key>AMApplicationVersion</key>
	<string>2.8</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Запустить shell-скрипт</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>GET_APP_ICON(){
icon_string=""
if [[ -f "${ROOT}"/AppIcon.icns ]]; then 
   icon_string=' with icon file "'"$(echo "$(diskutil info $(df / | tail -1 | cut -d' ' -f 1 ) |  grep "Volume Name:" | cut -d':'  -f 2 | xargs)")"''"$(echo "${ROOT}" | tr "/" ":" | xargs)"':AppIcon.icns"'
fi 
}

DISPLAY_NOTIFICATION(){
osascript -e 'display dialog '"${MESSAGE}"'  '"${icon_string}"'  buttons { "OK"}  giving up after 3' &gt;&gt;/dev/null 2&gt;/dev/null
}

ENTER_PASSWORD(){

mypassword="0"
if (security find-generic-password -a ${USER} -s PasswordResetLAN -w) &gt;/dev/null 2&gt;&amp;1; then
                if [[ ! "$1" = "force" ]]; then
                mypassword=$(security find-generic-password -a ${USER} -s PasswordResetLAN -w)
                else
                security delete-generic-password -a ${USER} -s PasswordResetLAN &gt;/dev/null 2&gt;&amp;1
                        if [[ $loc = "ru" ]]; then
                        MESSAGE='"НЕВЕРНЫЙ ПАРОЛЬ УДАЛЁН ИЗ КЛЮЧЕЙ !"'
                        else
                        MESSAGE='"WRONG PASSWORD REMOVED FROM KEYCHAIN !"'
                        fi
                        DISPLAY_NOTIFICATION 
                fi
fi

if [[ "$mypassword" = "0" ]] || [[ "$1" = "force" ]]; then
  if [[ $flag = 1 ]]; then 
        
        TRY=3
        while [[ ! $TRY = 0 ]]; do
        if [[ $loc = "ru" ]]; then
        if PASSWORD="$(osascript -e 'Tell application "System Events" to display dialog "Для управления сетью ResetLAN нужен пароль!\nОн будет храниться в вашей связке ключей\n\nПользователь:  '"$(id -F)"'\nВведите ваш пароль:" '"${icon_string}"' giving up after (110) with hidden answer  default answer ""' -e 'text returned of result')"; then cansel=0; else cansel=1; fi 2&gt;/dev/null
        else
        if PASSWORD="$(osascript -e 'Tell application "System Events" to display dialog "Password is required for Reset LAN service!\nIt will be keeped in your keychain\n\nUser Name:  '"$(id -F)"'\nEnter your password:" '"${icon_string}"' giving up after (110) with hidden answer  default answer ""' -e 'text returned of result')"; then cansel=0; else cansel=1; fi 2&gt;/dev/null
        fi      
                if [[ $cansel = 1 ]] || [[ "${PASSWORD}" = "" ]]; then break; fi 
                mypassword="${PASSWORD}" 
                if [[ $mypassword = "" ]]; then mypassword="?"; fi

                if echo "${mypassword}" | sudo -Sk printf '' 2&gt;/dev/null; then
                    security add-generic-password -a ${USER} -s PasswordResetLAN -w "${mypassword}" &gt;/dev/null 2&gt;&amp;1
                        if [[ $loc = "ru" ]]; then
                        MESSAGE='"ПАРОЛЬ СОХРАНЁН В СВЯЗКЕ КЛЮЧЕЙ !"'
                        else
                        MESSAGE='"PASSWORD KEEPED IN KEYCHAIN !"'
                        fi
                        DISPLAY_NOTIFICATION
                        break
                else
                        let "TRY--"
                        if [[ ! $TRY = 0 ]]; then 
                            if [[ $loc = "ru" ]]; then
                        if [[ $TRY = 2 ]]; then ATTEMPT="ПОПЫТКИ"; LAST="ОСТАЛОСЬ"; fi
                        if [[ $TRY = 1 ]]; then ATTEMPT="ПОПЫТКА"; LAST="ОСТАЛАСЬ"; fi
                        MESSAGE='"НЕВЕРНЫЙ ПАРОЛЬ. '$LAST' '$TRY' '$ATTEMPT' !\n\nДля сервиса ResetLAN нужен пароль"'
                            else
                        if [[ $TRY = 2 ]]; then ATTEMPT="ATTEMPTS"; fi
                        if [[ $TRY = 1 ]]; then ATTEMPT="ATTEMPT"; fi
                        MESSAGE='"INCORRECT PASSWORD. LEFT '$TRY' '$ATTEMPT' !\n\nPassword required for ResetLAN service"'
                            fi
                DISPLAY_NOTIFICATION
                fi
                fi
            done
            mypassword="0"
if (security find-generic-password -a ${USER} -s PasswordResetLAN -w) &gt;/dev/null 2&gt;&amp;1; then
                mypassword=$(security find-generic-password -a ${USER} -s PasswordResetLAN -w); 
fi
            if [[ "$mypassword" = "0" ]]; then
                    if [[ $loc = "ru" ]]; then
               MESSAGE='"ПАРОЛЬ НЕ ПОЛУЧЕН !\n\nСервис ResetLAN не установлен."'
                    else
               MESSAGE='"PASSWORD NOT KEEPED IN KEYCHAIN !\n\nResetLAN service setup aborted."'
                    fi
               DISPLAY_NOTIFICATION
                
        fi
    fi
fi
}

NEED_PASSWORD(){
need_password=0
if [[ ! $flag = 0 ]]; then ENTER_PASSWORD
   if [[ $mypassword = "0" ]]; then need_password=1
        elif ! echo "${mypassword}" | sudo -Sk printf '' 2&gt;/dev/null; then
                       ENTER_PASSWORD "force"
                if [[ $mypassword = "0" ]]; then need_password=1; fi
    fi
fi
}

MESSAGE_START(){
        if [[ $loc = "ru" ]]; then
        MESSAGE='"Сервис ResetLAN ЗАПУЩЕН"'
        else
        MESSAGE='"Service ResetLAN STARTED"'
        fi
DISPLAY_NOTIFICATION
}

MESSAGE_STOP(){
        if [[ $loc = "ru" ]]; then
        MESSAGE='"Сервис ResetLAN ОСТАНОВЛЕН"'
        else
        MESSAGE='"Service ResetLAN STOPPED"'
        fi
DISPLAY_NOTIFICATION
}

SET_INPUT(){

if [[ -f ~/Library/Preferences/com.apple.HIToolbox.plist ]]; then
    declare -a layouts_names
    layouts=$(defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleInputSourceHistory | egrep -w 'KeyboardLayout Name' | sed -E 's/.+ = "?([^"]+)"?;/\1/' | tr  '\n' ';')
    IFS=";"; layouts_names=($layouts); unset IFS; num=${#layouts_names[@]}
    keyboard="0"

    for ((i=0;i&lt;$num;i++)); do
        case ${layouts_names[i]} in
    "ABC"                ) keyboard=${layouts_names[i]}; break ;;
    "US Extended"        ) keyboard="USExtended"; break ;;
    "USInternational-PC" ) keyboard=${layouts_names[i]}; break ;;
    "U.S."               ) keyboard="US"; break ;;
    "British"            ) keyboard=${layouts_names[i]}; break ;;
    "British-PC"         ) keyboard=${layouts_names[i]}; break ;;
    esac 
    done

    if [[ ! $i = 0 ]]; then 
        if [[ ! $keyboard = "0" ]] &amp;&amp; [[ -f "${ROOT}/tools/xkbswitch" ]]; then "${ROOT}"/tools/xkbswitch -se $keyboard; fi
            
    fi
     
fi

}

########################### MAIN ################################
export LC_ALL=en_US.UTF-8  
export LANG=en_US.UTF-8

ROOT="$(ps xao command | grep -i "ResetLAN" | grep -v grep | grep -v /bin/bash | sed 's/[^/]*$//' | xargs)./../Resources"

	if [[ ! -d ~/Library/LaunchAgents ]]; then mkdir ~/Library/LaunchAgents; fi

	loc=`defaults read -g AppleLocale | cut -d "_" -f1`
	if [[ ! $loc = "ru" ]]; then loc="en"; fi 

	flag=1
	SET_INPUT
	GET_APP_ICON
	NEED_PASSWORD
	if [[ ${need_password} = 0 ]]; then

			reslan_job=$(launchctl list | grep "reset-lan.job" | cut -f3 | grep -x "reset-lan.job")
			if [[ ! "${reslan_job}" = "reset-lan.job" ]]; then
				if [[ ! -d ~/Library/Application\ Support/ResetLAN ]]; then mkdir ~/Library/Application\ Support/ResetLAN ; fi
				cp -a "${ROOT}"/tools/ResLan.sh ~/Library/Application\ Support/ResetLAN/.ResLan.sh
				cp -a "${ROOT}"/tools/ResetLan.plist ~/Library/LaunchAgents
				plutil -remove ProgramArguments.0 ~/Library/LaunchAgents/ResetLan.plist
				plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/Library/Application Support/ResetLAN/.ResLan.sh" ~/Library/LaunchAgents/ResetLan.plist
				chmod u+x ~/Library/Application\ Support/ResetLAN/.ResLan.sh
				launchctl load -w ~/Library/LaunchAgents/ResetLan.plist
				reslan_job=$(launchctl list | grep "reset-lan.job" | cut -f3 | grep -x "reset-lan.job")
			if [[ "${reslan_job}" = "reset-lan.job" ]]; then MESSAGE_START; fi
			else
				launchctl unload -w ~/Library/LaunchAgents/ResetLan.plist
				rm -f ~/Library/LaunchAgents/ResetLan.plist
				rm -Rf ~/Library/Application\ Support/ResetLAN
				MESSAGE_STOP
			fi
    fi

</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>0</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>11C9E82E-1CF9-44DF-B488-99DB685B887D</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Скрипт</string>
					<string>Команда</string>
					<string>Запустить</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>AF173495-AE6F-43B7-BF8D-64B93122284C</string>
				<key>UUID</key>
				<string>752982E1-D776-4666-B201-3584B3527752</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>533.500000:563.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/ru.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
